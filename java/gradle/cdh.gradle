// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// This file contains common tasks and configuration specific to CDH.

// Defines the mavenUrl and repositoryUrl based on the project properties.
ext {
  // Derive the repository to use based on the version and passed properties
  repositoryUrl = !version.endsWith("SNAPSHOT") ? project.mavenUrl : project.mavenSnapshotUrl
  // Note: We manually expand ${user.home}, if it exists, because gradle doesn't support variable expansion in property files
  repositoryUrl = repositoryUrl.replaceFirst('\\\$\\{user.home}', "${System.getProperty("user.home")}")
}
logger.info("Set repositoryUrl to $repositoryUrl")

repositories {
  maven { url repositoryUrl }
  maven { url mavenArtifactoryUrl }
  mavenCentral()
  mavenLocal()
}

logger.info("Resolving CDH pom file")
ArtifactResolutionQuery query = dependencies.createArtifactResolutionQuery()
    .forModule('com.cloudera.cdh', 'cdh-root', cdhversion)
    .withArtifacts(MavenModule, MavenPomArtifact)
ArtifactResolutionResult result = query.execute()

for (component in result.resolvedComponents) {
  Set<ArtifactResult> mavenPomArtifacts = component.getArtifacts(MavenPomArtifact)
  if (mavenPomArtifacts.size() > 1) {
    // This should never happen, but we guard against weird behavior just in case.
    throw new GradleException("More than one cdh-root pom artifact was found.")
  }
  ArtifactResult cdhPomArtifact = mavenPomArtifacts.first() // There is only 1
  def pom = new XmlSlurper().parse(cdhPomArtifact.file)

  // Read the required version properties to adjust the version
  // originally set in dependencies.gradle

  ext.cdhAvroVersion = pom.properties."cdh.avro.version"
  logger.info("Set Avro version to $cdhAvroVersion")

  ext.cdhFlumeVersion = pom.properties."cdh.flume-ng.version"
  logger.info("Set Flume version to $cdhFlumeVersion")

  ext.cdhHadoopVersion = pom.properties."cdh.hadoop.version"
  logger.info("Set Hadoop version to $cdhHadoopVersion")

  ext.cdhHiveVersion = pom.properties."cdh.hive.version"
  logger.info("Set Hive version to $cdhHiveVersion")

  ext.cdhParquetVersion = pom.properties."cdh.apache-parquet.version"
  logger.info("Set Parquet version to $cdhParquetVersion")

  ext.cdhScalaVersion = pom.properties."cdh.scala.version"
  logger.info("Setting Scala version to $cdhScalaVersion")

  ext.cdhSparkVersion = pom.properties."cdh.spark.version"
  logger.info("Set Spark version to $cdhSparkVersion")

  ext.cdhSparkAvroVersion = pom.properties."cdh.spark-avro.version"
  logger.info("Set SparkAvro version to $cdhSparkAvroVersion")

  ext.cdhSlf4jVersion = pom.properties."cdh.slf4j.version"
  logger.info("Set slf4j version to $cdhSlf4jVersion")

  ext.cdhCommonsIoVersion = pom.properties."cdh.commons-io.version"
  logger.info("Set commons-io version to $cdhCommonsIoVersion")

  ext.cdhNettyVersion = pom.properties."cdh.io.netty.version"
  logger.info("Set netty version to $cdhNettyVersion")
}
